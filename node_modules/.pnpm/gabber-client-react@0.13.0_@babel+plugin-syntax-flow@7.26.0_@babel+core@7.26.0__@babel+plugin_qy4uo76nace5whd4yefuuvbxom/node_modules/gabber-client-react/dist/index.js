"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ApiProvider: () => ApiProvider,
  RealtimeSessionEngineProvider: () => RealtimeSessionEngineProvider,
  useApi: () => useApi,
  useRealtimeSessionEngine: () => useRealtimeSessionEngine
});
module.exports = __toCommonJS(src_exports);

// src/providers/realtime_session_engine.tsx
var import_react = require("react");
var import_gabber_client_core = require("gabber-client-core");
var import_react2 = __toESM(require("react"));
var RealtimeSessionEngineContext = (0, import_react.createContext)(void 0);
function RealtimeSessionEngineProvider({ connectionOpts, children }) {
  const [id, setId] = (0, import_react.useState)(null);
  const [connectionState, setConnectionState] = (0, import_react.useState)("not_connected");
  const [messages, setMessages] = (0, import_react.useState)([]);
  const [microphoneEnabledState, setMicrophoneEnabledState] = (0, import_react.useState)(false);
  const [agentVolumeBands, setAgentVolumeBands] = (0, import_react.useState)([]);
  const [agentVolume, setAgentVolume] = (0, import_react.useState)(0);
  const [userVolumeBands, setUserVolumeBands] = (0, import_react.useState)([]);
  const [userVolume, setUserVolume] = (0, import_react.useState)(0);
  const [agentState, setAgentState] = (0, import_react.useState)("listening");
  const [remainingSeconds, setRemainingSeconds] = (0, import_react.useState)(null);
  const [lastError, setLastError] = (0, import_react.useState)(null);
  const [canPlayAudio, setCanPlayAudio] = (0, import_react.useState)(true);
  const createOnce = (0, import_react.useRef)(false);
  const [transcription, setTranscription] = (0, import_react.useState)({
    text: "",
    final: false
  });
  const lastUserMessage = (0, import_react.useMemo)(() => {
    for (let i = messages.length - 1; i >= 0; i--) {
      if (!messages[i].agent) {
        return messages[i];
      }
    }
    return null;
  }, [messages]);
  (0, import_react.useEffect)(() => {
    setTranscription({ final: false, text: (lastUserMessage == null ? void 0 : lastUserMessage.text) || "" });
  }, [lastUserMessage]);
  const onConnectionStateChanged = (0, import_react.useRef)((sessionState) => {
    setConnectionState(sessionState);
    setId(sessionEngine.current.id);
  });
  const onMessagesChanged = (0, import_react.useRef)((messages2) => {
    setMessages([...messages2]);
  });
  const onMicrophoneChanged = (0, import_react.useRef)((enabled) => __async(this, null, function* () {
    setMicrophoneEnabledState(enabled);
  }));
  const onAgentVolumeChanged = (0, import_react.useRef)((values, volume) => {
    setAgentVolumeBands(values);
    setAgentVolume(volume);
  });
  const onUserVolumeChanged = (0, import_react.useRef)((values, volume) => {
    setUserVolumeBands(values);
    setUserVolume(volume);
  });
  const onAgentStateChanged = (0, import_react.useRef)((as) => {
    setAgentState(as);
  });
  const onRemainingSecondsChanged = (0, import_react.useRef)((seconds) => {
    setRemainingSeconds(seconds);
  });
  const onAgentError = (0, import_react.useRef)((message) => {
    setLastError({ message });
  });
  const onCanPlayAudio = (0, import_react.useRef)((allowed) => {
    setCanPlayAudio(allowed);
  });
  const sessionEngine = (0, import_react.useRef)(
    (() => {
      if (createOnce.current) {
        return {};
      }
      createOnce.current = true;
      return new import_gabber_client_core.RealtimeSessionEngine({
        onAgentError: onAgentError.current,
        onAgentStateChanged: onAgentStateChanged.current,
        onRemainingSecondsChanged: onRemainingSecondsChanged.current,
        onUserVolumeChanged: onUserVolumeChanged.current,
        onAgentVolumeChanged: onAgentVolumeChanged.current,
        onConnectionStateChanged: onConnectionStateChanged.current,
        onMessagesChanged: onMessagesChanged.current,
        onMicrophoneChanged: onMicrophoneChanged.current,
        onCanPlayAudioChanged: onCanPlayAudio.current
      });
    })()
  );
  const setMicrophoneEnabled = (0, import_react.useRef)((enabled) => __async(this, null, function* () {
    if (!sessionEngine.current) {
      console.error("Trying to set microphone when there is no session");
      return;
    }
    yield sessionEngine.current.setMicrophoneEnabled(enabled);
  }));
  const sendChatMessage = (0, import_react.useRef)((p) => __async(this, null, function* () {
    if (!sessionEngine.current) {
      console.error("Trying to send chat message when there is no session");
      return;
    }
    yield sessionEngine.current.sendChatMessage(p);
  }));
  const startAudio = (0, import_react.useRef)(() => __async(this, null, function* () {
    yield sessionEngine.current.startAudio();
  }));
  (0, import_react.useEffect)(() => {
    if (connectionOpts) {
      if (connectionState !== "not_connected") {
        return;
      }
      sessionEngine.current.connect(connectionOpts);
    } else {
      if (connectionState === "not_connected") {
        return;
      }
      sessionEngine.current.disconnect();
    }
  }, [connectionOpts, connectionState]);
  return /* @__PURE__ */ import_react2.default.createElement(
    RealtimeSessionEngineContext.Provider,
    {
      value: {
        id,
        messages,
        connectionState,
        microphoneEnabled: microphoneEnabledState,
        agentVolumeBands,
        agentVolume,
        userVolumeBands,
        userVolume,
        agentState,
        remainingSeconds,
        transcription,
        lastError,
        canPlayAudio,
        sendChatMessage: sendChatMessage.current,
        setMicrophoneEnabled: setMicrophoneEnabled.current,
        startAudio: startAudio.current
      }
    },
    children
  );
}
function useRealtimeSessionEngine() {
  const context = import_react2.default.useContext(RealtimeSessionEngineContext);
  if (!context) {
    throw new Error("useSession must be used within a SessionProvider");
  }
  return context;
}

// src/providers/api.tsx
var import_react3 = require("react");
var import_gabber_client_core2 = require("gabber-client-core");
var import_react4 = __toESM(require("react"));
var ApiContext = (0, import_react3.createContext)(void 0);
function ApiProvider({ usageToken, children }) {
  const api = (0, import_react3.useMemo)(() => new import_gabber_client_core2.Api(usageToken), [usageToken]);
  return /* @__PURE__ */ import_react4.default.createElement(
    ApiContext.Provider,
    {
      value: {
        api
      }
    },
    children
  );
}
function useApi() {
  const context = import_react4.default.useContext(ApiContext);
  if (!context) {
    throw new Error("useApi must be used within a ApiProvider");
  }
  return context;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ApiProvider,
  RealtimeSessionEngineProvider,
  useApi,
  useRealtimeSessionEngine
});
//# sourceMappingURL=index.js.map