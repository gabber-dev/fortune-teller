{"version":3,"sources":["../src/providers/realtime_session_engine.tsx","../src/providers/api.tsx"],"sourcesContent":["import { createContext, useRef, useEffect, useState, useMemo } from \"react\";\nimport {\n  RealtimeSessionEngine,\n  SDKAgentState,\n  SDKConnectionState,\n  SDKConnectOptions,\n  SDKSendChatMessageParams,\n  SDKSessionTranscription,\n} from \"gabber-client-core\";\nimport React from \"react\";\n\ntype RealtimeSessionEngineContextData = {\n  id: string | null;\n  connectionState: SDKConnectionState;\n  messages: SDKSessionTranscription[];\n  lastError: {message: string} | null;\n  microphoneEnabled: boolean;\n  agentVolumeBands: number[];\n  agentVolume: number;\n  userVolumeBands: number[];\n  userVolume: number;\n  agentState: SDKAgentState;\n  remainingSeconds: number | null;\n  transcription: { text: string; final: boolean };\n  canPlayAudio: boolean;\n  setMicrophoneEnabled: (enabled: boolean) => Promise<void>;\n  sendChatMessage: (p: SDKSendChatMessageParams) => Promise<void>;\n  startAudio: () => Promise<void>;\n};\n\nconst RealtimeSessionEngineContext = createContext<RealtimeSessionEngineContextData | undefined>(undefined);\n\ntype Props = {\n  connectionOpts: SDKConnectOptions | null;\n  children: React.ReactNode;\n};\n\nexport function RealtimeSessionEngineProvider({ connectionOpts, children }: Props) {\n  const [id, setId] = useState<string | null>(null);\n  const [connectionState, setConnectionState] =\n    useState<SDKConnectionState>(\"not_connected\");\n  const [messages, setMessages] = useState<SDKSessionTranscription[]>([]);\n  const [microphoneEnabledState, setMicrophoneEnabledState] = useState(false);\n  const [agentVolumeBands, setAgentVolumeBands] = useState<number[]>([]);\n  const [agentVolume, setAgentVolume] = useState<number>(0);\n  const [userVolumeBands, setUserVolumeBands] = useState<number[]>([]);\n  const [userVolume, setUserVolume] = useState<number>(0);\n  const [agentState, setAgentState] = useState<SDKAgentState>(\"listening\");\n  const [remainingSeconds, setRemainingSeconds] = useState<number | null>(null);\n  const [lastError, setLastError] = useState<{message: string} | null>(null);\n  const [canPlayAudio, setCanPlayAudio] = useState(true);\n  const createOnce = useRef(false);\n  const [transcription, setTranscription] = useState({\n    text: \"\",\n    final: false,\n  });\n\n  const lastUserMessage = useMemo(() => {\n    for (let i = messages.length - 1; i >= 0; i--) {\n      if (!messages[i].agent) {\n        return messages[i];\n      }\n    }\n    return null;\n  }, [messages]);\n\n  useEffect(() => {\n    setTranscription({ final: false, text: lastUserMessage?.text || \"\" });\n  }, [lastUserMessage]);\n\n  const onConnectionStateChanged = useRef((sessionState: SDKConnectionState) => {\n    setConnectionState(sessionState);\n    setId(sessionEngine.current.id);\n  });\n\n  const onMessagesChanged = useRef((messages: SDKSessionTranscription[]) => {\n    setMessages([...messages]);\n  });\n\n  const onMicrophoneChanged = useRef(async (enabled: boolean) => {\n    setMicrophoneEnabledState(enabled);\n  });\n\n  const onAgentVolumeChanged = useRef((values: number[], volume: number) => {\n    setAgentVolumeBands(values);\n    setAgentVolume(volume);\n  });\n\n  const onUserVolumeChanged = useRef((values: number[], volume: number) => {\n    setUserVolumeBands(values);\n    setUserVolume(volume);\n  });\n\n  const onAgentStateChanged = useRef((as: SDKAgentState) => {\n    setAgentState(as);\n  });\n\n  const onRemainingSecondsChanged = useRef((seconds: number | null) => {\n    setRemainingSeconds(seconds);\n  });\n\n  const onAgentError = useRef((message: string) => {\n    setLastError({message});\n  });\n\n  const onCanPlayAudio = useRef((allowed: boolean) => {\n    setCanPlayAudio(allowed);\n  });\n\n  const sessionEngine = useRef(\n    (() => {\n      // React will always return the first instantiation\n      // even though this function will be called multiple times\n      if (createOnce.current) {\n        return {} as RealtimeSessionEngine;\n      }\n      createOnce.current = true;\n      return new RealtimeSessionEngine({\n        onAgentError: onAgentError.current,\n        onAgentStateChanged: onAgentStateChanged.current,\n        onRemainingSecondsChanged: onRemainingSecondsChanged.current,\n        onUserVolumeChanged: onUserVolumeChanged.current,\n        onAgentVolumeChanged: onAgentVolumeChanged.current,\n        onConnectionStateChanged: onConnectionStateChanged.current,\n        onMessagesChanged: onMessagesChanged.current,\n        onMicrophoneChanged: onMicrophoneChanged.current,\n        onCanPlayAudioChanged: onCanPlayAudio.current,\n      });\n    })()\n  );\n\n  const setMicrophoneEnabled = useRef(async (enabled: boolean) => {\n    if (!sessionEngine.current) {\n      console.error(\"Trying to set microphone when there is no session\");\n      return;\n    }\n    await sessionEngine.current.setMicrophoneEnabled(enabled);\n  });\n\n  const sendChatMessage = useRef(async (p: SDKSendChatMessageParams) => {\n    if (!sessionEngine.current) {\n      console.error(\"Trying to send chat message when there is no session\");\n      return;\n    }\n    await sessionEngine.current.sendChatMessage(p);\n  });\n\n  const startAudio = useRef(async () => {\n    await sessionEngine.current.startAudio();\n  });\n\n  useEffect(() => {\n    if (connectionOpts) {\n      if (connectionState !== \"not_connected\") {\n        return;\n      }\n      sessionEngine.current.connect(connectionOpts);\n    } else {\n      if (connectionState === \"not_connected\") {\n        return;\n      }\n      sessionEngine.current.disconnect();\n    }\n  }, [connectionOpts, connectionState]);\n\n  return (\n    <RealtimeSessionEngineContext.Provider\n      value={{\n        id,\n        messages,\n        connectionState: connectionState,\n        microphoneEnabled: microphoneEnabledState,\n        agentVolumeBands,\n        agentVolume,\n        userVolumeBands,\n        userVolume,\n        agentState,\n        remainingSeconds,\n        transcription,\n        lastError,\n        canPlayAudio,\n        sendChatMessage: sendChatMessage.current,\n        setMicrophoneEnabled: setMicrophoneEnabled.current,\n        startAudio: startAudio.current,\n      }}\n    >\n      {children}\n    </RealtimeSessionEngineContext.Provider>\n  );\n}\n\nexport function useRealtimeSessionEngine() {\n  const context = React.useContext(RealtimeSessionEngineContext);\n  if (!context) {\n    throw new Error(\"useSession must be used within a SessionProvider\");\n  }\n  return context;\n}\n","import { createContext, useMemo } from \"react\";\nimport {\n  Api,\n} from \"gabber-client-core\";\nimport React from \"react\";\n\ntype ApiContextData = {\n  api: Api;\n};\n\nconst ApiContext = createContext<ApiContextData | undefined>(undefined);\n\ntype Props = {\n  usageToken: string;\n  children: React.ReactNode;\n};\n\nexport function ApiProvider({ usageToken, children }: Props) {\n  const api = useMemo(() => new Api(usageToken), [usageToken]);\n\n  return (\n    <ApiContext.Provider\n      value={{\n        api,\n      }}\n    >\n      {children}\n    </ApiContext.Provider>\n  );\n}\n\nexport function useApi() {\n  const context = React.useContext(ApiContext);\n  if (!context) {\n    throw new Error(\"useApi must be used within a ApiProvider\");\n  }\n  return context;\n}\n"],"mappings":"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","names":["messages","createContext","useMemo","React"]}