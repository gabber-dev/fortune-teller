var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/providers/realtime_session_engine.tsx
import { createContext, useRef, useEffect, useState, useMemo } from "react";
import {
  RealtimeSessionEngine
} from "gabber-client-core";
import React from "react";
var RealtimeSessionEngineContext = createContext(void 0);
function RealtimeSessionEngineProvider({ connectionOpts, children }) {
  const [id, setId] = useState(null);
  const [connectionState, setConnectionState] = useState("not_connected");
  const [messages, setMessages] = useState([]);
  const [microphoneEnabledState, setMicrophoneEnabledState] = useState(false);
  const [agentVolumeBands, setAgentVolumeBands] = useState([]);
  const [agentVolume, setAgentVolume] = useState(0);
  const [userVolumeBands, setUserVolumeBands] = useState([]);
  const [userVolume, setUserVolume] = useState(0);
  const [agentState, setAgentState] = useState("listening");
  const [remainingSeconds, setRemainingSeconds] = useState(null);
  const [lastError, setLastError] = useState(null);
  const [canPlayAudio, setCanPlayAudio] = useState(true);
  const createOnce = useRef(false);
  const [transcription, setTranscription] = useState({
    text: "",
    final: false
  });
  const lastUserMessage = useMemo(() => {
    for (let i = messages.length - 1; i >= 0; i--) {
      if (!messages[i].agent) {
        return messages[i];
      }
    }
    return null;
  }, [messages]);
  useEffect(() => {
    setTranscription({ final: false, text: (lastUserMessage == null ? void 0 : lastUserMessage.text) || "" });
  }, [lastUserMessage]);
  const onConnectionStateChanged = useRef((sessionState) => {
    setConnectionState(sessionState);
    setId(sessionEngine.current.id);
  });
  const onMessagesChanged = useRef((messages2) => {
    setMessages([...messages2]);
  });
  const onMicrophoneChanged = useRef((enabled) => __async(this, null, function* () {
    setMicrophoneEnabledState(enabled);
  }));
  const onAgentVolumeChanged = useRef((values, volume) => {
    setAgentVolumeBands(values);
    setAgentVolume(volume);
  });
  const onUserVolumeChanged = useRef((values, volume) => {
    setUserVolumeBands(values);
    setUserVolume(volume);
  });
  const onAgentStateChanged = useRef((as) => {
    setAgentState(as);
  });
  const onRemainingSecondsChanged = useRef((seconds) => {
    setRemainingSeconds(seconds);
  });
  const onAgentError = useRef((message) => {
    setLastError({ message });
  });
  const onCanPlayAudio = useRef((allowed) => {
    setCanPlayAudio(allowed);
  });
  const sessionEngine = useRef(
    (() => {
      if (createOnce.current) {
        return {};
      }
      createOnce.current = true;
      return new RealtimeSessionEngine({
        onAgentError: onAgentError.current,
        onAgentStateChanged: onAgentStateChanged.current,
        onRemainingSecondsChanged: onRemainingSecondsChanged.current,
        onUserVolumeChanged: onUserVolumeChanged.current,
        onAgentVolumeChanged: onAgentVolumeChanged.current,
        onConnectionStateChanged: onConnectionStateChanged.current,
        onMessagesChanged: onMessagesChanged.current,
        onMicrophoneChanged: onMicrophoneChanged.current,
        onCanPlayAudioChanged: onCanPlayAudio.current
      });
    })()
  );
  const setMicrophoneEnabled = useRef((enabled) => __async(this, null, function* () {
    if (!sessionEngine.current) {
      console.error("Trying to set microphone when there is no session");
      return;
    }
    yield sessionEngine.current.setMicrophoneEnabled(enabled);
  }));
  const sendChatMessage = useRef((p) => __async(this, null, function* () {
    if (!sessionEngine.current) {
      console.error("Trying to send chat message when there is no session");
      return;
    }
    yield sessionEngine.current.sendChatMessage(p);
  }));
  const startAudio = useRef(() => __async(this, null, function* () {
    yield sessionEngine.current.startAudio();
  }));
  useEffect(() => {
    if (connectionOpts) {
      if (connectionState !== "not_connected") {
        return;
      }
      sessionEngine.current.connect(connectionOpts);
    } else {
      if (connectionState === "not_connected") {
        return;
      }
      sessionEngine.current.disconnect();
    }
  }, [connectionOpts, connectionState]);
  return /* @__PURE__ */ React.createElement(
    RealtimeSessionEngineContext.Provider,
    {
      value: {
        id,
        messages,
        connectionState,
        microphoneEnabled: microphoneEnabledState,
        agentVolumeBands,
        agentVolume,
        userVolumeBands,
        userVolume,
        agentState,
        remainingSeconds,
        transcription,
        lastError,
        canPlayAudio,
        sendChatMessage: sendChatMessage.current,
        setMicrophoneEnabled: setMicrophoneEnabled.current,
        startAudio: startAudio.current
      }
    },
    children
  );
}
function useRealtimeSessionEngine() {
  const context = React.useContext(RealtimeSessionEngineContext);
  if (!context) {
    throw new Error("useSession must be used within a SessionProvider");
  }
  return context;
}

// src/providers/api.tsx
import { createContext as createContext2, useMemo as useMemo2 } from "react";
import {
  Api
} from "gabber-client-core";
import React2 from "react";
var ApiContext = createContext2(void 0);
function ApiProvider({ usageToken, children }) {
  const api = useMemo2(() => new Api(usageToken), [usageToken]);
  return /* @__PURE__ */ React2.createElement(
    ApiContext.Provider,
    {
      value: {
        api
      }
    },
    children
  );
}
function useApi() {
  const context = React2.useContext(ApiContext);
  if (!context) {
    throw new Error("useApi must be used within a ApiProvider");
  }
  return context;
}
export {
  ApiProvider,
  RealtimeSessionEngineProvider,
  useApi,
  useRealtimeSessionEngine
};
//# sourceMappingURL=index.mjs.map