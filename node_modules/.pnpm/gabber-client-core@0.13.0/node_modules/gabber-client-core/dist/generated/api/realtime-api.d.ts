/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { GetRealtimeSessionMessages200Response } from '../model';
import type { GetRealtimeSessionTimeline200Response } from '../model';
import type { ListRealtimeSessions200Response } from '../model';
import type { RealtimeSession } from '../model';
import type { RealtimeSessionConfigUpdate } from '../model';
import type { RealtimeSessionStartResponse } from '../model';
import type { StartRealtimeSessionRequest } from '../model';
/**
 * RealtimeApi - axios parameter creator
 * @export
 */
export declare const RealtimeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * End the RealtimeSession with the given identifier.
     * @summary End a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endRealtimeSession: (session: string, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * End the RealtimeSession with the given identifier.
     * @summary Get a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealtimeSession: (session: string, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all ContextMessages associated with the given RealtimeSession.
     * @summary Get a RealtimeSession messages.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealtimeSessionMessages: (session: string, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the timeline of the RealtimeSession with the given identifier.
     * @summary Get a RealtimeSession timeline.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealtimeSessionTimeline: (session: string, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all Realtime Sessions.
     * @summary List Realtime Sessions.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRealtimeSessions: (xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Start a new RealtimeSession with the given configuration.
     * @summary Start a new RealtimeSession.
     * @param {StartRealtimeSessionRequest} startRealtimeSessionRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startRealtimeSession: (startRealtimeSessionRequest: StartRealtimeSessionRequest, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the RealtimeSession with the given identifier.
     * @summary Update a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {RealtimeSessionConfigUpdate} realtimeSessionConfigUpdate
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRealtimeSession: (session: string, realtimeSessionConfigUpdate: RealtimeSessionConfigUpdate, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RealtimeApi - functional programming interface
 * @export
 */
export declare const RealtimeApiFp: (configuration?: Configuration) => {
    /**
     * End the RealtimeSession with the given identifier.
     * @summary End a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealtimeSession>>;
    /**
     * End the RealtimeSession with the given identifier.
     * @summary Get a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealtimeSession>>;
    /**
     * Get all ContextMessages associated with the given RealtimeSession.
     * @summary Get a RealtimeSession messages.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealtimeSessionMessages(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRealtimeSessionMessages200Response>>;
    /**
     * Get the timeline of the RealtimeSession with the given identifier.
     * @summary Get a RealtimeSession timeline.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealtimeSessionTimeline(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRealtimeSessionTimeline200Response>>;
    /**
     * List all Realtime Sessions.
     * @summary List Realtime Sessions.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRealtimeSessions(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRealtimeSessions200Response>>;
    /**
     * Start a new RealtimeSession with the given configuration.
     * @summary Start a new RealtimeSession.
     * @param {StartRealtimeSessionRequest} startRealtimeSessionRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startRealtimeSession(startRealtimeSessionRequest: StartRealtimeSessionRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealtimeSessionStartResponse>>;
    /**
     * Update the RealtimeSession with the given identifier.
     * @summary Update a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {RealtimeSessionConfigUpdate} realtimeSessionConfigUpdate
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRealtimeSession(session: string, realtimeSessionConfigUpdate: RealtimeSessionConfigUpdate, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealtimeSession>>;
};
/**
 * RealtimeApi - factory interface
 * @export
 */
export declare const RealtimeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * End the RealtimeSession with the given identifier.
     * @summary End a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<RealtimeSession>;
    /**
     * End the RealtimeSession with the given identifier.
     * @summary Get a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<RealtimeSession>;
    /**
     * Get all ContextMessages associated with the given RealtimeSession.
     * @summary Get a RealtimeSession messages.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealtimeSessionMessages(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetRealtimeSessionMessages200Response>;
    /**
     * Get the timeline of the RealtimeSession with the given identifier.
     * @summary Get a RealtimeSession timeline.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealtimeSessionTimeline(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetRealtimeSessionTimeline200Response>;
    /**
     * List all Realtime Sessions.
     * @summary List Realtime Sessions.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRealtimeSessions(xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListRealtimeSessions200Response>;
    /**
     * Start a new RealtimeSession with the given configuration.
     * @summary Start a new RealtimeSession.
     * @param {StartRealtimeSessionRequest} startRealtimeSessionRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startRealtimeSession(startRealtimeSessionRequest: StartRealtimeSessionRequest, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<RealtimeSessionStartResponse>;
    /**
     * Update the RealtimeSession with the given identifier.
     * @summary Update a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {RealtimeSessionConfigUpdate} realtimeSessionConfigUpdate
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRealtimeSession(session: string, realtimeSessionConfigUpdate: RealtimeSessionConfigUpdate, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<RealtimeSession>;
};
/**
 * RealtimeApi - object-oriented interface
 * @export
 * @class RealtimeApi
 * @extends {BaseAPI}
 */
export declare class RealtimeApi extends BaseAPI {
    /**
     * End the RealtimeSession with the given identifier.
     * @summary End a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    endRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RealtimeSession, any>>;
    /**
     * End the RealtimeSession with the given identifier.
     * @summary Get a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    getRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RealtimeSession, any>>;
    /**
     * Get all ContextMessages associated with the given RealtimeSession.
     * @summary Get a RealtimeSession messages.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    getRealtimeSessionMessages(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRealtimeSessionMessages200Response, any>>;
    /**
     * Get the timeline of the RealtimeSession with the given identifier.
     * @summary Get a RealtimeSession timeline.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    getRealtimeSessionTimeline(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRealtimeSessionTimeline200Response, any>>;
    /**
     * List all Realtime Sessions.
     * @summary List Realtime Sessions.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    listRealtimeSessions(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListRealtimeSessions200Response, any>>;
    /**
     * Start a new RealtimeSession with the given configuration.
     * @summary Start a new RealtimeSession.
     * @param {StartRealtimeSessionRequest} startRealtimeSessionRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    startRealtimeSession(startRealtimeSessionRequest: StartRealtimeSessionRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RealtimeSessionStartResponse, any>>;
    /**
     * Update the RealtimeSession with the given identifier.
     * @summary Update a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {RealtimeSessionConfigUpdate} realtimeSessionConfigUpdate
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    updateRealtimeSession(session: string, realtimeSessionConfigUpdate: RealtimeSessionConfigUpdate, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RealtimeSession, any>>;
}
//# sourceMappingURL=realtime-api.d.ts.map